# -*- coding: utf-8 -*-
"""Prediction using Supervised ML(To predict the score based on number of hours of study)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hqJCZG4EtDbyMqY4asJ9ONOZA50Q0yXP
"""

# Commented out IPython magic to ensure Python compatibility.
# importing the libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
# %matplotlib inline

url = "http://bit.ly/w-data"
df = pd.read_csv(url)
df.head()

#plotting a bar graph
df.plot(kind="bar",x="Hours",y="Scores",color="green",figsize=(8,6))
plt.title("Hours vs Scores")
plt.xlabel("Hours")
plt.ylabel("Scores")

#plotting scatter plot
df.plot(kind="scatter",x="Hours",y="Scores",color="black",figsize=(8,6))
plt.title("Study hours vs Scores")
plt.xlabel("Hours")
plt.ylabel("Scores")

# selecting the dependent and independent variables
X = df.iloc[:, :-1].values  
Y = df.iloc[:, 1].values

# splitting data into train and test set
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

#importing the LinearRegression Model and fitting it
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

y_pred = regressor.predict(X_test)

print(y_pred)

# predicting the score if the hours of study is 9.25
own_pred=regressor.predict([[9.25]])
print(own_pred)

"""Model Visualisation"""

#comparing the actual and predicted value through visualization
sns.distplot(y_test,hist=False,color="purple",label="actual")
sns.distplot(y_pred,hist=False,color="green",label="Predicted")

from sklearn import metrics  
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))